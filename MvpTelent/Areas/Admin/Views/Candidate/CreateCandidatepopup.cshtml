@model Web.Model.Candidate.CandidateModel


<div class="modal-dialog " role="document">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title" id="exampleModalLabel1"> Candidate Information</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="modal-body">

            <form id="Candidateform">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="form-group">
                            <label class="form-label">First Name</label>
                            <input id="UName" maxlength="20" autocomplete="off" class="form-control" value="@Model.Name" placeholder="Please enter first name" name="UName" type="text">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Last Name</label>
                            <input id="ULastName" maxlength="20" autocomplete="off" class="form-control" value="@Model.Name" placeholder="Please enter last name" name="ULastName" type="text">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Phone Number</label>
                            <input id="Phoneno" maxlength="14" placeholder="(XXX) XXX-XXXX"  autocomplete="off" class="form-control" value="@Model.Phone" placeholder="Please enter phone number" name="Phoneno" type="text">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Email</label>
                            <input id="UEmail" autocomplete="off" class="form-control" value="@Model.Email" name="UEmail" placeholder="Please enter email" maxlength="50" type="text">
                        </div>
                        <div class="form-group autocomplete-alignment">
                            <label class="form-label">Title</label>
                            <input id="Title" maxlength="70" autocomplete="off" class="form-control" value="@Model.Title" placeholder=" Please enter title" name="Title" type="text">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Upload Resume </label>
                            <input type="file" id="Uploadfiles" class="portfolio-choose form-control cursor-pointer">
                        </div>


                        <div class="form-group">

                            <input type="checkbox" id="LoginAccess" name="LoginAccess" tabindex="7">
                            <span>Send Registration  Email</span>


                        </div>


                    </div>
                </div>
            </form>

        </div>
        <div class="modal-footer">
            <input type="button" class="btn btn-primary" id="candidatebtn" name="candidatebtn" onclick="CreateCandidate(@Model.Id)" value="Save">
            <button type="button" class="btn btn-light" data-dismiss="modal">Close</button>
        </div>
    </div>
</div>

<script>
    $('#Phoneno')

        .keydown(function (e) {
            var key = e.which || e.charCode || e.keyCode || 0;
            $phone = $(this);

            // Don't let them remove the starting '('
            if ($phone.val().length === 1 && (key === 8 || key === 46)) {
                $phone.val('(');
                return false;
            }
            // Reset if they highlight and type over first char.
            else if ($phone.val().charAt(0) !== '(') {
                $phone.val('(' + String.fromCharCode(e.keyCode) + '');
            }

            // Auto-format- do not expose the mask as the user begins to type
            if (key !== 8 && key !== 9) {
                if ($phone.val().length === 4) {
                    $phone.val($phone.val() + ')');
                }
                if ($phone.val().length === 5) {
                    $phone.val($phone.val() + ' ');
                }
                if ($phone.val().length === 9) {
                    $phone.val($phone.val() + '-');
                }
            }

            // Allow numeric (and tab, backspace, delete) keys only
            return (key == 8 ||
                key == 9 ||
                key == 46 ||
                (key >= 48 && key <= 57) ||
                (key >= 96 && key <= 105));
        })

        .bind('focus click', function () {
            $phone = $(this);

            if ($phone.val().length === 0) {
                $phone.val('(');
            }
            else {
                var val = $phone.val();
                $phone.val('').val(val); // Ensure cursor remains at the end
            }
        })

        .blur(function () {
            $phone = $(this);

            if ($phone.val() === '(') {
                $phone.val('');
            }
        });
</script>
<script>
    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
    var strArray = [];
    $.ajax({
        type: "Post",
        url: "/Home/getCandidateTitleList",
        contentType: false,
        processData: false,
        success: function (data) {
            $.each(data.candidatetagvaluecollection, function () {
                var tmpStr = "";
                for (var i = 0; i < this.Name.length; i++)
                {
                    if (this.Name.charAt(i) == ',') {
                        strArray.push(tmpStr);
                        tmpStr = "";
                        continue;
                    }
                    tmpStr += this.Name.charAt(i);
                }
                strArray.push(tmpStr);
            });
            autocomplete(document.getElementById("Title"), strArray);
        },
        error: function () {
            alert("Server error");
        }
    });
</script>
